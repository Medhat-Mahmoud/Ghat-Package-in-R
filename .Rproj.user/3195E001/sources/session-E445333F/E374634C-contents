### Original ld_decay() function slightly adapted ------------------------------
ld_decay <- function(gen= gen,
                     map=map,
                     max_win_snp=2000,
                     max.chr=max.chr, 
                     cores=1,
                     max_r2=max_r2,
                     rownames_in_gen_file = TRUE){
  map         <- map[order(map[,2],map[,3]),]
  remMap      <- which(map$Chromosome == 0)
  if(any(map$Chromosome == 0)){
    remMap <- which(map$Chromosome == 0)
    # which markers belong to chromosome 0
    # the markers on chromosome are removed
    remGeno     <- remMap+1
    gen         <- gen[,-remGeno]
    map         <- map[-remMap,]
  }
  cor1        <- function(x1,x2){
    x1        <- as.matrix(x1)
    x2        <- as.matrix(x2)
    sx1       <- t(x1)-colMeans(x1)
    sx2       <- t(x2)-colMeans(x2)
    cc        <- (rowSums(sx1*sx2))/(sqrt(rowSums(sx1^2)*rowSums(sx2^2)))
    return(cc)
  }
  alld1       <- matrix(0,nrow=max(map$Chromosome),ncol=max_win_snp)
  amap        <- map
  if(rownames_in_gen_file == FALSE){
    index_gen <- 1:ncol(gen)
  }
  if(rownames_in_gen_file == TRUE){
    index_gen <- 2:ncol(gen)
  }
  a           <- gen[,index_gen]
  rownames(a) <- gen$X
  for(rr in 1:max.chr){
    message(paste("Chromosome",rr))
    af        <- a[,amap[,2]==rr,drop=FALSE]
    if(ncol(af)==0) next
    message(paste("Number of markers processed:",dim(af)[2]))
    ind       <- 1:ncol(af)
    fun       <- function(i){
      if(i<=ncol(af)){ld1 <- mean(cor1(af[,head(ind,-i)],af[,tail(ind,-i)])^2,na.rm=TRUE)}
      else{ld1 <- 0}
      return(ld1)
    }
    ld1       <- unlist(mclapply(1:max_win_snp, FUN=fun,  mc.preschedule = TRUE, mc.cores = cores))
    alld1[rr,]<- ld1
  }
  f           <- function(x){return(min(which(x<max_r2)))}
  dd          <- apply(alld1,1,f)
  eff_nmark   <- sum(table(map$Chromosome)/dd)
  return (list(cor=alld1, ch_eff_nmark=dd, eff_nmark=eff_nmark))
  ###
}

